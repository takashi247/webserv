@startuml

circle          main

class Server
{
	- Config config_;
	- std::map<int, Socket*> sockets_;
	+ Server(const char *filepath);
}
class Socket
{

}
class ConfigParser
{
	+ void ParseConfigFile(Config &config);
}
class Config
{
	- std::vector<ServerConfig> vec_server_config_;
	+ Config(const char *filepath);
	+ ServerConfig *getServerConfig(int port);
	+ std::vector<int> getServerPorts();

}
class ServerConfig
{
	std::vector<LocationConfig> vec_location_config_;
}
class LocationConfig
{

}
class	HttpRequest
{
	std::string method_;
	std::string uri_;
	std::string version_;
	std::string content_type_;
	size_t content_length_;
	bool is_bad_request_;
}
class	HttpRequestParser
{
	+ int Parse(const std::string recv_msg, HttpRequest &request);
}

class	HttpResponse
{
	+ HttpResponse(HttpRequest& request, ServerConfig *config);
	+ std::string getResponse();
}


main --> Server : configファイル名
Server o-- Config : configのこと\n何でも聞ける存在
Server o-- Socket
Server --> HttpRequestParser : リクエストメッセージを渡すと\nHttpRequestを返してくれる
Config o-- ServerConfig
Config --> ConfigParser
ServerConfig o-- LocationConfig
Server --> HttpResponse : HttpRequestを渡すと\nレスポンス文字列を返してくれる


@enduml
