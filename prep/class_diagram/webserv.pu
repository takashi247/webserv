@startuml webserv
class ConfigParser {
  file_path: std::string

  ConfigParser(const char*)
  ParseConfigFile(): std::map<int, std::vector<ServerConfig> >
  CreateServerConfig(std::vector<std::string>): ServerConfig
}

class ServerConfig {
  server_directive: std::vector<std::string>
  port: int
  host: std::string
  server_name: std::string
  error_page_path: std::string
  client_max_body_size: std::string
  vec_location_config: std::vector<LocationConfig>

  ServerConfig(std::vector<std::string>)
  ParseServerDirective(): int
  CreateLocationConfig(std::vector<std::string>): LocationConfig
}

class LocationConfig {
  location_directive: std::vector<std::string>
  http_method: std::vector<string>
  proxy_pass: std::string
  root: std::string
  autoindex: bool
  index: std::vector<string>
  add_cgi_handler: std::vector<string>
  upload_file: bool
  upload_state_store: std::string

  LocationConfig(std::vector<std::string>)
  ParseLocationDirective(): int
}

class HttpServer {
  map_server_config: std::map<int, std::vector<ServerConfig> >
  nfds: int

  HttpServer(std::map<int, std::vector<ServerConfig> >)
  RunServer(): int
  InitSockets(): std::vector<Socket>
  HandleRequests(std::vector<Socket>): int
  InitFds(std::vector<Socket>, fd_set*, fd_set*, fd_set*): void
  ShutDownServer(): int
}

class Socket {
  port: int
  vec_server_config: std::vector<ServerConfig>
  socket_fd: int
  accepted_fd: int

  Socket(int, std::vector<ServerConfig>)
  InitSocket(): int
  AcceptConnection(): int
  ReceiveRequest(): std::vector<std::string>
  SendResponse(HttpResponse): int
  EndConnection(): int
}

class HttpRequestParser {
  received_message: std::vector<std::string>
  vec_server_config: std::vector<ServerConfig>

  HttpRequestParser(std::vector<std::string>, std::vector<ServerConfig>)
  CreateHttpRequest(): HttpRequest
}

class HttpRequest {
  received_message: std::vector<std::string>
  config: ServerConfig
  version: std::string
  header: std::vector<std::string>
  body: std::vector<std::string>
  method: std::string
  uri: std::string

  HttpRequest(std::vector<std::string>, ServerConfig)
  ProcessHttpRequest(): HttpResponse
  ProcessCgiRequest(): HttpResponse
  ProcessNonCgiRequest(): HttpResponse
}

class HttpResponse {
  version: std::string
  header: std::vector<std::string>
  body: std::vector<std::string>
  status_code: int
  status_desc: std::string
}

ServerConfig "1" *-- "0,n" LocationConfig
ConfigParser "1" *-- "1..*" ServerConfig
HttpServer "1" o-- "1..*" ServerConfig
Socket "1" o-- "1..*" ServerConfig
HttpServer "1" *-- "1..*" Socket
HttpRequest "1" o-- "1" ServerConfig
HttpRequest "1" *-- "1" HttpResponse
HttpRequestParser "1" *-- "1" HttpRequest
HttpServer "1" *-- "1.." HttpRequestParser

@enduml
